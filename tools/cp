#!/usr/bin/env python3

from cplib import *
from subprocess import Popen, PIPE, STDOUT
import os
import sys
import fcntl
import select
import testdev

# ------------------------------------------------------------------------
def asm(l):
    tab = []
    print("running emas: %s" % l)
    p = Popen(['emas', '-O', 'debug'], stdout=PIPE, stdin=PIPE, stderr=PIPE)
    (stdout_data, stderr_data) = p.communicate(l.encode('ascii'))
    if p.returncode != 0:
        print("FAILED: %s" % stdout_data.decode('ascii').strip())
        return []

    addr = 0;

    for line in stdout_data.decode('ascii').split("\n"):
        if len(line) > 0 and "none" not in line:
            dls = line.split()
            waddr = int(dls[1], 0)
            wval = int(dls[3], 0)
            while addr < waddr:
                print("   @ 0x%04x : 0x0000" % addr)
                tab.append(0)
                addr += 1
            print("   %s" % line)
            tab.append(wval)
            addr += 1
    return tab

# ------------------------------------------------------------------------
def cmd_process(s, line):
    a = line.lower().split()
    try:
        cmd = a[0]
    except IndexError:
        print(m.state())
        return 0
    if cmd == "help":
        print(functions.keys())
    elif cmd == "quit":
        return 1
    elif cmd == "asm":
        t = asm(line[4:])
        m.upload(0, t);
    elif cmd == "upload":
        m.upload_file(0, a[1]);
    elif cmd == "reset":
        m.cmds("stop;clear;clk0;mode0;0;r1;load;r2;load;r3;load;r4;load;r5;load;r6;load;r7;load;ar;load;ic;load;ac;load;ir;load;r1")
    elif cmd == "s":
        print(m.state())
    else:
        try:
            m.cmds(cmd)
        except Exception as e:
            print(e)

    return 0

# ------------------------------------------------------------------------
def input_process(m, line):
    for cmd in line.split(";"):
        quit = cmd_process(m, cmd)
    return quit

# ------------------------------------------------------------------------
def cmd_loop(m):
    quit = 0
    while not quit:
        try:
            line = input("CPU> ")
            quit = input_process(m, line)
        except (EOFError, KeyboardInterrupt):
            print("")
            quit = 1

# ------------------------------------------------------------------------
# --- MAIN ---------------------------------------------------------------
# ------------------------------------------------------------------------

iobus = iobus.IOBus("/dev/ttyUSB0", 1000000)
m = m4cp(iobus)
td = testdev.TestDev(iobus)

cmdfd = sys.stdin.fileno()
fl = fcntl.fcntl(cmdfd, fcntl.F_GETFL)
fcntl.fcntl(cmdfd, fcntl.F_SETFL, fl | os.O_NONBLOCK)

iofd = iobus.fileno()

poll = select.poll()
poll.register(cmdfd, select.POLLIN)
poll.register(iofd, select.POLLIN)

quit = False;

while not quit:
    print("CPU> ", end="", flush=True)
    try:
        events = poll.poll()
    except KeyboardInterrupt:
        print ("")
        quit = True
        continue
    for fileno, event in events:
        if fileno == cmdfd:
            line = ""
            while True:
                l = sys.stdin.read(16)
                if not l:
                    break
                line += l
            if not line:
                print ("")
                quit = True
                continue
            quit = input_process(m, line)
        elif fileno == iofd:
            print ("", end="\r")
            td.process()
        else:
            print(fileno, event)

poll.unregister(cmdfd)
poll.unregister(iofd)

iobus.close()

# vim: tabstop=4 expandtab shiftwidth=4 softtabstop=4
